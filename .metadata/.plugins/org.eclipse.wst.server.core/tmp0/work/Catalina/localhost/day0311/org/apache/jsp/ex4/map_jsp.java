/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2020-03-21 06:58:53 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ex4;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=d24b45a0cda3b0e29fc1ea1a3fa5d8f1&libraries=services\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.onload = function(){\r\n");
      out.write("\t// 마커를 클릭하면 장소명을 표출할 인포윈도우 입니다\r\n");
      out.write("\tvar infowindow = new kakao.maps.InfoWindow({zIndex:1});\r\n");
      out.write("\r\n");
      out.write("\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t    mapOption = {\r\n");
      out.write("\t        center: new kakao.maps.LatLng(37.566826, 126.9786567), // 지도의 중심좌표\r\n");
      out.write("\t        level: 3 // 지도의 확대 레벨\r\n");
      out.write("\t    };  \r\n");
      out.write("\t\r\n");
      out.write("\t//마커목록을 담아둘 배열을 만들어요.\r\n");
      out.write("\tvar markerList = [];\r\n");
      out.write("\r\n");
      out.write("\t// 지도를 생성합니다    \r\n");
      out.write("\tvar map = new kakao.maps.Map(mapContainer, mapOption); \r\n");
      out.write("\r\n");
      out.write("\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\tvar ps = new kakao.maps.services.Places(); \r\n");
      out.write("\r\n");
      out.write("\t// 키워드로 장소를 검색합니다\r\n");
      out.write("\tps.keywordSearch('이태원 맛집', placesSearchCB); \r\n");
      out.write("\r\n");
      out.write("\t// 키워드 검색 완료 시 호출되는 콜백함수 입니다\r\n");
      out.write("\tfunction placesSearchCB (data, status, pagination) {\r\n");
      out.write("\t    if (status === kakao.maps.services.Status.OK) {\r\n");
      out.write("\r\n");
      out.write("\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해\r\n");
      out.write("\t        // LatLngBounds 객체에 좌표를 추가합니다\r\n");
      out.write("\t        var bounds = new kakao.maps.LatLngBounds();\r\n");
      out.write("\r\n");
      out.write("\t        for (var i=0; i<data.length; i++) {\r\n");
      out.write("\t            displayMarker(data[i]);    \r\n");
      out.write("\t            bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n");
      out.write("\t        }       \r\n");
      out.write("\r\n");
      out.write("\t        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다\r\n");
      out.write("\t        map.setBounds(bounds);\r\n");
      out.write("\t    } \r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t// 지도에 마커를 표시하는 함수입니다\r\n");
      out.write("\tfunction displayMarker(place) {\r\n");
      out.write("\t    \r\n");
      out.write("\t    // 마커를 생성하고 지도에 표시합니다\r\n");
      out.write("\t    var marker = new kakao.maps.Marker({\r\n");
      out.write("\t        map: map,\r\n");
      out.write("\t        position: new kakao.maps.LatLng(place.y, place.x) \r\n");
      out.write("\t    });\r\n");
      out.write("\t    \r\n");
      out.write("\t    markerList.push(marker);\r\n");
      out.write("\r\n");
      out.write("\t    // 마커에 클릭이벤트를 등록합니다\r\n");
      out.write("\t    kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("\t        // 마커를 클릭하면 장소명이 인포윈도우에 표출됩니다\r\n");
      out.write("\t        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + place.place_name + '</div>');\r\n");
      out.write("\t        infowindow.open(map, marker);\r\n");
      out.write("\t    });\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tdocument.getElementById(\"btnSearch\").onclick = function(){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor(var i=0; i<markerList.length; i++){\r\n");
      out.write("\t\t\tmarkerList[i].setMap(null); \r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tvar searchPlace = document.getElementById(\"place\").value;\r\n");
      out.write("\t\t// 장소 검색 객체를 생성합니다\r\n");
      out.write("\t\tvar ps = new kakao.maps.services.Places(); \r\n");
      out.write("\r\n");
      out.write("\t\t// 키워드로 장소를 검색합니다\r\n");
      out.write("\t\tps.keywordSearch(searchPlace, placesSearchCB); \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>장소 검색</h2>\r\n");
      out.write("<input type=\"search\" id=\"place\">\r\n");
      out.write("<button id=\"btnSearch\">검색</button>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:350px;\"></div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
