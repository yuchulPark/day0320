/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2020-03-22 15:50:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ex4;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class corona_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>다음 지도 API</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"map\" style=\"width: 100%; height: 100vh;\"></div>\r\n");
      out.write("\r\n");
      out.write("\t<script\r\n");
      out.write("\t\tsrc=\"https://dapi.kakao.com/v2/maps/sdk.js?appkey=d24b45a0cda3b0e29fc1ea1a3fa5d8f1&libraries=clusterer\"></script>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("\t\tmapOption = {\r\n");
      out.write("\t\t\tcenter : new kakao.maps.LatLng(37.555205, 126.970427), // 지도의 중심좌표\r\n");
      out.write("\t\t\tlevel : 8, // 지도의 확대 레벨\r\n");
      out.write("\t\t\tmapTypeId : kakao.maps.MapTypeId.ROADMAP\r\n");
      out.write("\t\t// 지도종류\r\n");
      out.write("\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t// 지도를 생성한다 \r\n");
      out.write("\t\tvar map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\r\n");
      out.write("\t\t// 마커 클러스터러를 생성합니다 \r\n");
      out.write("\t\tvar clusterer = new kakao.maps.MarkerClusterer({\r\n");
      out.write("\t\t\tmap : map, // 마커들을 클러스터로 관리하고 표시할 지도 객체 \r\n");
      out.write("\t\t\taverageCenter : true, // 클러스터에 포함된 마커들의 평균 위치를 클러스터 마커 위치로 설정 \r\n");
      out.write("\t\t\tminLevel : 10\r\n");
      out.write("\t\t// 클러스터 할 최소 지도 레벨 \r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\tvar data = [\r\n");
      out.write("\t\t\t\t[ 37.5701952, 126.960661, '<div style=\"padding:5px\">위치1</div>' ],\r\n");
      out.write("\t\t\t\t[ 37.558906, 126.943026, '<div style=\"padding:5px\">위치2</div>' ],\r\n");
      out.write("\t\t\t\t[ 37.5825544, 126.936452, '<div style=\"padding:5px\">위치3</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.571084, 126.933594, '<div style=\"padding:5px\">위치4</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.559465, 126.945135, '<div style=\"padding:5px\">위치5</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.557565, 126.943181, '<div style=\"padding:5px\">위치6</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.559809, 126.942233, '<div style=\"padding:5px\">위치7</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.559161, 126.939367, '<div style=\"padding:5px\">위치8</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.5594272, 126.9451329, '<div style=\"padding:5px\">위치9</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.55687, 126.935098, '<div style=\"padding:5px\">위치10</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.5575264, 126.9431666, '<div style=\"padding:5px\">위치11</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.582424, 126.91046, '<div style=\"padding:5px\">위치12</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.6574151, 127.0678763, '<div style=\"padding:5px\">위치13</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.6543814, 127.0636656, '<div style=\"padding:5px\">위치14</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.6247308, 127.080005, '<div style=\"padding:5px\">위치15</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.6212368, 127.0833875, '<div style=\"padding:5px\">위치16</div>' ], \r\n");
      out.write("\t\t\t\t[ 37.6540782, 127.0566045, '<div style=\"padding:5px\">위치17</div>' ], \r\n");
      out.write("\t\t\t]\r\n");
      out.write("\t\tvar markers = [];\r\n");
      out.write("\r\n");
      out.write("\t\tfor (var i = 0; i < data.length; i++) {\r\n");
      out.write("\t\t\t// 지도에 마커를 생성하고 표시한다.\r\n");
      out.write("\t\t\tvar marker = new kakao.maps.Marker({\r\n");
      out.write("\t\t\t\tposition : new kakao.maps.LatLng(data[i][0], data[i][1]),\r\n");
      out.write("\t\t\t\tmap : map\r\n");
      out.write("\t\t\t})\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 인포윈도우를 생성합니다\r\n");
      out.write("\t\t\tvar infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("\t\t\t\tcontent : data[i][2]\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t// 마커 위에 인포윈도우를 표시합니다. 두번째 파라미터인 marker를 넣어주지 않으면 지도 위에 표시됩니다\r\n");
      out.write("\t\t\tinfowindow.open(map, marker);\r\n");
      out.write("\t\t\tmarkers.push(marker)\r\n");
      out.write("\t\t\tkakao.maps.event.addListener(marker, 'mouseover', makeOverListener(\r\n");
      out.write("\t\t\t\t\tmap, marker, infowindow));\r\n");
      out.write("\t\t\tkakao.maps.event.addListener(marker, 'mouseout',\r\n");
      out.write("\t\t\t\t\tmakeOutListener(infowindow));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 클러스터러에 마커들을 추가\r\n");
      out.write("\t\tclusterer.addMarkers(markers)\r\n");
      out.write("\r\n");
      out.write("\t\t// 인포윈도우를 표시하는 클로저를 만드는 함수입니다 \r\n");
      out.write("\t\tfunction makeOverListener(map, marker, infowindow) {\r\n");
      out.write("\t\t\treturn function() {\r\n");
      out.write("\t\t\t\tinfowindow.open(map, marker);\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t// 인포윈도우를 닫는 클로저를 만드는 함수입니다 \r\n");
      out.write("\t\tfunction makeOutListener(infowindow) {\r\n");
      out.write("\t\t\treturn function() {\r\n");
      out.write("\t\t\t\tinfowindow.close();\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
