package com.bit.exam;

public interface MessageBean {
	public void sayHello(String name);
}
/*
스프링 - 프레임워크 중 하나. 프레임워크 중 전세계적으로 널리 애용되는 것은 spring, struts 등이 있음
프레임워크 (framework) : 어플리케이션을 구현하기에 용이한 뼈대
우리나라에서 공공 프로젝트는 전자정보표준프레임워크에 spring과 mybatis가 표준으로 채택되어 있음
특징 - DI - 의존성 주입
자바로 만들어진 소프트웨어 속을 들여다보면 수많은 클래스로 구성되어 있음 이 클래스들은 서로 관계에 있는데 그 중 HAS A 관계는 어떤 클래스가 다른 클래스의 맴버변수가 되는 것을 말함
ex. class A{
	B ob;
}
B클래스의 변수 ob는 A클래스의 맴버입니다. 이것을  has a 관계라고 표현
B클래스 입장에서 A클래스를 사용하려면 코드 어딘가에 ob = new B()라고 객체를 생성하는 문장이 있어야함
그러나 만약 우리의 고객이 A의 맴버 B를 B말고 다른 것(C)으로 변경해 달라는 요청이 들어왔다고 가정.
new B()라고 되어있는 코드를 찾아서 new C()로 직접 고쳐야함
그런데  B가 사ㅐ용된 곳이 A 한군데만 있는것이 아니라 여러곳에서 사용되었다면 일일이 관련코드를 찾아 바꾸기란 어려움
또 미쳐 못바꾼 부분이 있을수도 있음
이와같이 코드내에 직접 new B()라고 되어있는 부분을 "강한 의존관계"에 있다라고 말함
우리는 사용자의 빈번한 수정에 대한 요구에 유연하게 대처하기 위하여 스프링 환경설정에 의하여 "느슨한 의존관계" 또는 "의존관계 자동설정"을 이용하려고 함
즉, 스프링 환경설정 파일(XML, 어노테이션)에 의하여 어플리케이션에서 필요한 객체를 제공하여 의존관계를 설정하려고 함
이렇게 하면 사용자의 빈번한 수정이 있다고 하더라도 일일이 찾아다니면서 코드를 수정해야하는 번거로움을 줄일 수 있음. 환경설정 파일만 수정해주면 끝 
스프링 환경이 객체를 제공해줌 -> 의존관계를 자동으로 설정




*/